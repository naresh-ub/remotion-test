import { KernelMessage } from '@jupyterlab/services';
import { ISignal } from '@lumino/signaling';
import { IKernel } from './tokens';
/**
 * A base kernel class handling basic kernel messaging.
 */
export declare abstract class BaseKernel implements IKernel {
    /**
     * Construct a new BaseKernel.
     *
     * @param options The instantiation options for a BaseKernel.
     */
    constructor(options: IKernel.IOptions);
    /**
     * A promise that is fulfilled when the kernel is ready.
     */
    get ready(): Promise<void>;
    /**
     * Return whether the kernel is disposed.
     */
    get isDisposed(): boolean;
    /**
     * A signal emitted when the kernel is disposed.
     */
    get disposed(): ISignal<this, void>;
    /**
     * Get the kernel id
     */
    get id(): string;
    /**
     * Get the name of the kernel
     */
    get name(): string;
    /**
     * The location in the virtual filesystem from which the kernel was started.
     */
    get location(): string;
    /**
     * The current execution count
     */
    get executionCount(): number;
    /**
     * Get the last parent header
     */
    get parentHeader(): KernelMessage.IHeader<KernelMessage.MessageType> | undefined;
    /**
     * Get the last parent message (mimic ipykernel's get_parent)
     */
    get parent(): KernelMessage.IMessage | undefined;
    /**
     * Dispose the kernel.
     */
    dispose(): void;
    /**
     * Handle an incoming message from the client.
     *
     * @param msg The message to handle
     */
    handleMessage(msg: KernelMessage.IMessage): Promise<void>;
    /**
     * Handle a `kernel_info_request` message.
     *
     * @returns A promise that resolves with the kernel info.
     */
    abstract kernelInfoRequest(): Promise<KernelMessage.IInfoReplyMsg['content']>;
    /**
     * Handle an `execute_request` message.
     *
     * @param content - The content of the execute_request kernel message
     */
    abstract executeRequest(content: KernelMessage.IExecuteRequestMsg['content']): Promise<KernelMessage.IExecuteReplyMsg['content']>;
    /**
     * Handle a `complete_request` message.
     *
     * @param content - The content of the request.
     */
    abstract completeRequest(content: KernelMessage.ICompleteRequestMsg['content']): Promise<KernelMessage.ICompleteReplyMsg['content']>;
    /**
     * Handle an `inspect_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    abstract inspectRequest(content: KernelMessage.IInspectRequestMsg['content']): Promise<KernelMessage.IInspectReplyMsg['content']>;
    /**
     * Handle an `is_complete_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    abstract isCompleteRequest(content: KernelMessage.IIsCompleteRequestMsg['content']): Promise<KernelMessage.IIsCompleteReplyMsg['content']>;
    /**
     * Handle a `comm_info_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    abstract commInfoRequest(content: KernelMessage.ICommInfoRequestMsg['content']): Promise<KernelMessage.ICommInfoReplyMsg['content']>;
    /**
     * Send an `input_reply` message.
     *
     * @param content - The content of the reply.
     */
    abstract inputReply(content: KernelMessage.IInputReplyMsg['content']): void;
    /**
     * Send an `comm_open` message.
     *
     * @param msg - The comm_open message.
     */
    abstract commOpen(msg: KernelMessage.ICommOpenMsg): Promise<void>;
    /**
     * Send an `comm_msg` message.
     *
     * @param msg - The comm_msg message.
     */
    abstract commMsg(msg: KernelMessage.ICommMsgMsg): Promise<void>;
    /**
     * Send an `comm_close` message.
     *
     * @param close - The comm_close message.
     */
    abstract commClose(msg: KernelMessage.ICommCloseMsg): Promise<void>;
    /**
     * Stream an event from the kernel
     *
     * @param parentHeader The parent header.
     * @param content The stream content.
     */
    protected stream(content: KernelMessage.IStreamMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send a `display_data` message to the client.
     *
     * @param parentHeader The parent header.
     * @param content The display_data content.
     */
    protected displayData(content: KernelMessage.IDisplayDataMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send a `input_request` message to the client.
     *
     * @param parentHeader The parent header.
     * @param content The input_request content.
     */
    protected inputRequest(content: KernelMessage.IInputRequestMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send an `execute_result` message.
     *
     * @param parentHeader The parent header.
     * @param content The execute result content.
     */
    protected publishExecuteResult(content: KernelMessage.IExecuteResultMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send an `error` message to the client.
     *
     * @param parentHeader The parent header.
     * @param content The error content.
     */
    protected publishExecuteError(content: KernelMessage.IErrorMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send a `update_display_data` message to the client.
     *
     * @param parentHeader The parent header.
     * @param content The update_display_data content.
     */
    protected updateDisplayData(content: KernelMessage.IUpdateDisplayDataMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send a `clear_output` message to the client.
     *
     * @param parentHeader The parent header.
     * @param content The clear_output content.
     */
    protected clearOutput(content: KernelMessage.IClearOutputMsg['content'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send a `comm` message to the client.
     *
     * @param .
     */
    protected handleComm(type: 'comm_close' | 'comm_msg' | 'comm_open', content: KernelMessage.ICommMsgMsg['content'], metadata: KernelMessage.ICommMsgMsg['metadata'], buffers: KernelMessage.ICommMsgMsg['buffers'], parentHeader?: KernelMessage.IHeader<KernelMessage.MessageType> | undefined): void;
    /**
     * Send an 'idle' status message.
     *
     * @param parent The parent message
     */
    private _idle;
    /**
     * Send a 'busy' status message.
     *
     * @param parent The parent message.
     */
    private _busy;
    /**
     * Handle a kernel_info_request message
     *
     * @param parent The parent message.
     */
    private _kernelInfo;
    /**
     * Handle a `history_request` message
     *
     * @param msg The parent message.
     */
    private _historyRequest;
    /**
     * Send an `execute_input` message.
     *
     * @param msg The parent message.
     */
    private _executeInput;
    /**
     * Handle an execute_request message.
     *
     * @param msg The parent message.
     */
    private _execute;
    /**
     * Handle an complete_request message
     *
     * @param msg The parent message.
     */
    private _complete;
    /**
     * Handle an inspect_request message
     *
     * @param msg The parent message.
     */
    private _inspect;
    /**
     * Handle an is_complete_request message
     *
     * @param msg The parent message.
     */
    private _isCompleteRequest;
    private _id;
    private _name;
    private _location;
    private _history;
    private _executionCount;
    private _isDisposed;
    private _disposed;
    private _sendMessage;
    private _parentHeader;
    private _parent;
}
