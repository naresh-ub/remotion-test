import type localforage from 'localforage';
import { IPlugin, ISettings } from './tokens';
/**
 * A class to handle requests to /api/settings
 */
export declare class Settings implements ISettings {
    constructor(options: Settings.IOptions);
    /**
     * A promise that resolves when the settings storage is fully initialized
     */
    get ready(): Promise<void>;
    /**
     * A lazy reference to initialized storage
     */
    protected get storage(): Promise<LocalForage>;
    /**
     * Finish any initialization after server has started and all extensions are applied.
     */
    initialize(): Promise<void>;
    /**
     * Prepare the storage
     */
    protected initStorage(): Promise<void>;
    /**
     * Get default options for localForage instances
     */
    protected get defaultStorageOptions(): LocalForageOptions;
    /**
     * Create a settings store.
     */
    protected defaultSettingsStorage(): LocalForage;
    /**
     * Get settings by plugin id
     *
     * @param pluginId the id of the plugin
     *
     */
    get(pluginId: string): Promise<IPlugin | undefined>;
    /**
     * Get all the settings
     */
    getAll(): Promise<{
        settings: IPlugin[];
    }>;
    /**
     * Save settings for a given plugin id
     *
     * @param pluginId The id of the plugin
     * @param raw The raw settings
     *
     */
    save(pluginId: string, raw: string): Promise<void>;
    /**
     * Get all the settings for core or federated plugins
     */
    private _getAll;
    private _storageName;
    private _storageDrivers;
    private _storage;
    private _localforage;
    private _ready;
}
/**
 * A namespace for settings metadata.
 */
export declare namespace Settings {
    /**
     * Initialization options for settings.
     */
    interface IOptions {
        localforage: typeof localforage;
        storageName?: string | null;
        storageDrivers?: string[] | null;
    }
}
