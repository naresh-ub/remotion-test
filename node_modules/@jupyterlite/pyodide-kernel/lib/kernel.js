import coincident from 'coincident';
import { wrap } from 'comlink';
import { PromiseDelegate } from '@lumino/coreutils';
import { PageConfig } from '@jupyterlab/coreutils';
import { BaseKernel } from '@jupyterlite/kernel';
import { allJSONUrl, pipliteWheelUrl } from './_pypi';
import { DriveContentsProcessor, } from '@jupyterlite/contents';
/**
 * A kernel that executes Python code with Pyodide.
 */
export class PyodideKernel extends BaseKernel {
    /**
     * Instantiate a new PyodideKernel
     *
     * @param options The instantiation options for a new PyodideKernel
     */
    constructor(options) {
        super(options);
        this._ready = new PromiseDelegate();
        this._worker = this.initWorker(options);
        this._remoteKernel = this.initRemote(options);
        this._contentsManager = options.contentsManager;
    }
    /**
     * Load the worker.
     *
     * ### Note
     *
     * Subclasses must implement this typographically almost _exactly_ for
     * webpack to find it.
     */
    initWorker(options) {
        if (crossOriginIsolated) {
            return new Worker(new URL('./coincident.worker.js', import.meta.url), {
                type: 'module',
            });
        }
        else {
            return new Worker(new URL('./comlink.worker.js', import.meta.url), {
                type: 'module',
            });
        }
    }
    /**
     * Initialize the remote kernel.
     * Use coincident if crossOriginIsolated, comlink otherwise
     * See the two following issues for more context:
     *  - https://github.com/jupyterlite/jupyterlite/issues/1424
     *  - https://github.com/jupyterlite/pyodide-kernel/pull/126
     */
    initRemote(options) {
        let remote;
        if (crossOriginIsolated) {
            remote = coincident(this._worker);
            remote.processWorkerMessage = this._processWorkerMessage.bind(this);
            // The coincident worker uses its own filesystem API:
            remote.processDriveRequest = async (data) => {
                if (!DriveContentsProcessor) {
                    throw new Error('File system calls over Atomics.wait is only supported with jupyterlite>=0.4.0a3');
                }
                if (this._contentsProcessor === undefined) {
                    this._contentsProcessor = new DriveContentsProcessor({
                        contentsManager: this._contentsManager,
                    });
                }
                return await this._contentsProcessor.processDriveRequest(data);
            };
        }
        else {
            remote = wrap(this._worker);
            // we use the normal postMessage mechanism
            this._worker.addEventListener('message', (ev) => {
                var _a;
                if (typeof ((_a = ev === null || ev === void 0 ? void 0 : ev.data) === null || _a === void 0 ? void 0 : _a._kernelMessage) !== 'undefined') {
                    // only process non comlink messages
                    this._processWorkerMessage(ev.data._kernelMessage);
                }
            });
        }
        const remoteOptions = this.initRemoteOptions(options);
        remote.initialize(remoteOptions).then(this._ready.resolve.bind(this._ready));
        return remote;
    }
    initRemoteOptions(options) {
        const { pyodideUrl } = options;
        const indexUrl = pyodideUrl.slice(0, pyodideUrl.lastIndexOf('/') + 1);
        const baseUrl = PageConfig.getBaseUrl();
        const pipliteUrls = [...(options.pipliteUrls || []), allJSONUrl.default];
        const disablePyPIFallback = !!options.disablePyPIFallback;
        return {
            baseUrl,
            pyodideUrl,
            indexUrl,
            pipliteWheelUrl: options.pipliteWheelUrl || pipliteWheelUrl.default,
            pipliteUrls,
            disablePyPIFallback,
            location: this.location,
            mountDrive: options.mountDrive,
            loadPyodideOptions: options.loadPyodideOptions || {},
        };
    }
    /**
     * Dispose the kernel.
     */
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this._worker.terminate();
        this._worker = null;
        super.dispose();
    }
    /**
     * A promise that is fulfilled when the kernel is ready.
     */
    get ready() {
        return this._ready.promise;
    }
    /**
     * Process a message coming from the pyodide web worker.
     *
     * @param msg The worker message to process.
     */
    _processWorkerMessage(msg) {
        var _a, _b, _c, _d, _e, _f, _g;
        if (!msg.type) {
            return;
        }
        switch (msg.type) {
            case 'stream': {
                const bundle = (_a = msg.bundle) !== null && _a !== void 0 ? _a : { name: 'stdout', text: '' };
                this.stream(bundle, msg.parentHeader);
                break;
            }
            case 'input_request': {
                const bundle = (_b = msg.content) !== null && _b !== void 0 ? _b : { prompt: '', password: false };
                this.inputRequest(bundle, msg.parentHeader);
                break;
            }
            case 'display_data': {
                const bundle = (_c = msg.bundle) !== null && _c !== void 0 ? _c : { data: {}, metadata: {}, transient: {} };
                this.displayData(bundle, msg.parentHeader);
                break;
            }
            case 'update_display_data': {
                const bundle = (_d = msg.bundle) !== null && _d !== void 0 ? _d : { data: {}, metadata: {}, transient: {} };
                this.updateDisplayData(bundle, msg.parentHeader);
                break;
            }
            case 'clear_output': {
                const bundle = (_e = msg.bundle) !== null && _e !== void 0 ? _e : { wait: false };
                this.clearOutput(bundle, msg.parentHeader);
                break;
            }
            case 'execute_result': {
                const bundle = (_f = msg.bundle) !== null && _f !== void 0 ? _f : {
                    execution_count: 0,
                    data: {},
                    metadata: {},
                };
                this.publishExecuteResult(bundle, msg.parentHeader);
                break;
            }
            case 'execute_error': {
                const bundle = (_g = msg.bundle) !== null && _g !== void 0 ? _g : { ename: '', evalue: '', traceback: [] };
                this.publishExecuteError(bundle, msg.parentHeader);
                break;
            }
            case 'comm_msg':
            case 'comm_open':
            case 'comm_close': {
                this.handleComm(msg.type, msg.content, msg.metadata, msg.buffers, msg.parentHeader);
                break;
            }
        }
    }
    /**
     * Handle a kernel_info_request message
     */
    async kernelInfoRequest() {
        const content = {
            implementation: 'pyodide',
            implementation_version: '0.1.0',
            language_info: {
                codemirror_mode: {
                    name: 'python',
                    version: 3,
                },
                file_extension: '.py',
                mimetype: 'text/x-python',
                name: 'python',
                nbconvert_exporter: 'python',
                pygments_lexer: 'ipython3',
                version: '3.8',
            },
            protocol_version: '5.3',
            status: 'ok',
            banner: 'A WebAssembly-powered Python kernel backed by Pyodide',
            help_links: [
                {
                    text: 'Python (WASM) Kernel',
                    url: 'https://pyodide.org',
                },
            ],
        };
        return content;
    }
    /**
     * Handle an `execute_request` message
     *
     * @param msg The parent message.
     */
    async executeRequest(content) {
        await this.ready;
        const result = await this._remoteKernel.execute(content, this.parent);
        result.execution_count = this.executionCount;
        return result;
    }
    /**
     * Handle an complete_request message
     *
     * @param msg The parent message.
     */
    async completeRequest(content) {
        return await this._remoteKernel.complete(content, this.parent);
    }
    /**
     * Handle an `inspect_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    async inspectRequest(content) {
        return await this._remoteKernel.inspect(content, this.parent);
    }
    /**
     * Handle an `is_complete_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    async isCompleteRequest(content) {
        return await this._remoteKernel.isComplete(content, this.parent);
    }
    /**
     * Handle a `comm_info_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    async commInfoRequest(content) {
        return await this._remoteKernel.commInfo(content, this.parent);
    }
    /**
     * Send an `comm_open` message.
     *
     * @param msg - The comm_open message.
     */
    async commOpen(msg) {
        return await this._remoteKernel.commOpen(msg, this.parent);
    }
    /**
     * Send an `comm_msg` message.
     *
     * @param msg - The comm_msg message.
     */
    async commMsg(msg) {
        return await this._remoteKernel.commMsg(msg, this.parent);
    }
    /**
     * Send an `comm_close` message.
     *
     * @param close - The comm_close message.
     */
    async commClose(msg) {
        return await this._remoteKernel.commClose(msg, this.parent);
    }
    /**
     * Send an `input_reply` message.
     *
     * @param content - The content of the reply.
     */
    async inputReply(content) {
        return await this._remoteKernel.inputReply(content, this.parent);
    }
}
