import { Contents, KernelMessage } from '@jupyterlab/services';
import { BaseKernel, IKernel } from '@jupyterlite/kernel';
import { IPyodideWorkerKernel } from './tokens';
/**
 * A kernel that executes Python code with Pyodide.
 */
export declare class PyodideKernel extends BaseKernel implements IKernel {
    /**
     * Instantiate a new PyodideKernel
     *
     * @param options The instantiation options for a new PyodideKernel
     */
    constructor(options: PyodideKernel.IOptions);
    /**
     * Load the worker.
     *
     * ### Note
     *
     * Subclasses must implement this typographically almost _exactly_ for
     * webpack to find it.
     */
    protected initWorker(options: PyodideKernel.IOptions): Worker;
    /**
     * Initialize the remote kernel.
     * Use coincident if crossOriginIsolated, comlink otherwise
     * See the two following issues for more context:
     *  - https://github.com/jupyterlite/jupyterlite/issues/1424
     *  - https://github.com/jupyterlite/pyodide-kernel/pull/126
     */
    protected initRemote(options: PyodideKernel.IOptions): IPyodideWorkerKernel;
    protected initRemoteOptions(options: PyodideKernel.IOptions): IPyodideWorkerKernel.IOptions;
    /**
     * Dispose the kernel.
     */
    dispose(): void;
    /**
     * A promise that is fulfilled when the kernel is ready.
     */
    get ready(): Promise<void>;
    /**
     * Process a message coming from the pyodide web worker.
     *
     * @param msg The worker message to process.
     */
    private _processWorkerMessage;
    /**
     * Handle a kernel_info_request message
     */
    kernelInfoRequest(): Promise<KernelMessage.IInfoReplyMsg['content']>;
    /**
     * Handle an `execute_request` message
     *
     * @param msg The parent message.
     */
    executeRequest(content: KernelMessage.IExecuteRequestMsg['content']): Promise<KernelMessage.IExecuteReplyMsg['content']>;
    /**
     * Handle an complete_request message
     *
     * @param msg The parent message.
     */
    completeRequest(content: KernelMessage.ICompleteRequestMsg['content']): Promise<KernelMessage.ICompleteReplyMsg['content']>;
    /**
     * Handle an `inspect_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    inspectRequest(content: KernelMessage.IInspectRequestMsg['content']): Promise<KernelMessage.IInspectReplyMsg['content']>;
    /**
     * Handle an `is_complete_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    isCompleteRequest(content: KernelMessage.IIsCompleteRequestMsg['content']): Promise<KernelMessage.IIsCompleteReplyMsg['content']>;
    /**
     * Handle a `comm_info_request` message.
     *
     * @param content - The content of the request.
     *
     * @returns A promise that resolves with the response message.
     */
    commInfoRequest(content: KernelMessage.ICommInfoRequestMsg['content']): Promise<KernelMessage.ICommInfoReplyMsg['content']>;
    /**
     * Send an `comm_open` message.
     *
     * @param msg - The comm_open message.
     */
    commOpen(msg: KernelMessage.ICommOpenMsg): Promise<void>;
    /**
     * Send an `comm_msg` message.
     *
     * @param msg - The comm_msg message.
     */
    commMsg(msg: KernelMessage.ICommMsgMsg): Promise<void>;
    /**
     * Send an `comm_close` message.
     *
     * @param close - The comm_close message.
     */
    commClose(msg: KernelMessage.ICommCloseMsg): Promise<void>;
    /**
     * Send an `input_reply` message.
     *
     * @param content - The content of the reply.
     */
    inputReply(content: KernelMessage.IInputReplyMsg['content']): Promise<void>;
    private _contentsManager;
    private _contentsProcessor;
    private _worker;
    private _remoteKernel;
    private _ready;
}
/**
 * A namespace for PyodideKernel statics.
 */
export declare namespace PyodideKernel {
    /**
     * The instantiation options for a Pyodide kernel
     */
    interface IOptions extends IKernel.IOptions {
        /**
         * The URL to fetch Pyodide.
         */
        pyodideUrl: string;
        /**
         * The URL to fetch piplite
         */
        pipliteWheelUrl?: string;
        /**
         * The URLs from which to attempt PyPI API requests
         */
        pipliteUrls: string[];
        /**
         * Do not try pypi.org if `piplite.install` fails against local URLs
         */
        disablePyPIFallback: boolean;
        /**
         * Whether or not to mount the Emscripten drive
         */
        mountDrive: boolean;
        /**
         * additional options to provide to `loadPyodide`
         * @see https://pyodide.org/en/stable/usage/api/js-api.html#globalThis.loadPyodide
         */
        loadPyodideOptions: Record<string, any> & {
            lockFileURL: string;
            packages: string[];
        };
        /**
         * The Jupyterlite content manager
         */
        contentsManager: Contents.IManager;
    }
}
