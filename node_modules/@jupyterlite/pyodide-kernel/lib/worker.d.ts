import type Pyodide from 'pyodide';
import type { DriveFS } from '@jupyterlite/contents';
import { KernelMessage } from '@jupyterlab/services';
import type { IPyodideWorkerKernel } from './tokens';
export declare class PyodideRemoteKernel {
    constructor();
    /**
     * Accept the URLs from the host
     **/
    initialize(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    protected initRuntime(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    protected initPackageManager(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    protected initKernel(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    protected initGlobals(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    /**
     * Setup custom Emscripten FileSystem
     */
    protected initFilesystem(options: IPyodideWorkerKernel.IOptions): Promise<void>;
    /**
     * Recursively convert a Map to a JavaScript object
     * @param obj A Map, Array, or other  object to convert
     */
    mapToObject(obj: any): any;
    /**
     * Format the response from the Pyodide evaluation.
     *
     * @param res The result object from the Pyodide evaluation
     */
    formatResult(res: any): any;
    /**
     * Register the callback function to send messages from the worker back to the main thread.
     * @param callback the callback to register
     */
    registerCallback(callback: (msg: any) => void): void;
    /**
     * Makes sure pyodide is ready before continuing, and cache the parent message.
     */
    setup(parent: any): Promise<void>;
    /**
     * Execute code with the interpreter.
     *
     * @param content The incoming message with the code to execute.
     */
    execute(content: any, parent: any): Promise<any>;
    /**
     * Complete the code submitted by a user.
     *
     * @param content The incoming message with the code to complete.
     */
    complete(content: any, parent: any): Promise<any>;
    /**
     * Inspect the code submitted by a user.
     *
     * @param content The incoming message with the code to inspect.
     */
    inspect(content: {
        code: string;
        cursor_pos: number;
        detail_level: 0 | 1;
    }, parent: any): Promise<any>;
    /**
     * Check code for completeness submitted by a user.
     *
     * @param content The incoming message with the code to check.
     */
    isComplete(content: {
        code: string;
    }, parent: any): Promise<any>;
    /**
     * Respond to the commInfoRequest.
     *
     * @param content The incoming message with the comm target name.
     */
    commInfo(content: any, parent: any): Promise<KernelMessage.ICommInfoReplyMsg['content']>;
    /**
     * Respond to the commOpen.
     *
     * @param content The incoming message with the comm open.
     */
    commOpen(content: any, parent: any): Promise<any>;
    /**
     * Respond to the commMsg.
     *
     * @param content The incoming message with the comm msg.
     */
    commMsg(content: any, parent: any): Promise<any>;
    /**
     * Respond to the commClose.
     *
     * @param content The incoming message with the comm close.
     */
    commClose(content: any, parent: any): Promise<any>;
    /**
     * Resolve the input request by getting back the reply from the main thread
     *
     * @param content The incoming message with the reply
     */
    inputReply(content: any, parent: any): Promise<void>;
    /**
     * Send a input request to the front-end.
     *
     * @param prompt the text to show at the prompt
     * @param password Is the request for a password?
     */
    sendInputRequest(prompt: string, password: boolean): Promise<void>;
    getpass(prompt: string): Promise<any>;
    input(prompt: string): Promise<any>;
    /**
     * Send a comm message to the front-end.
     *
     * @param type The type of the comm message.
     * @param content The content.
     * @param metadata The metadata.
     * @param ident The ident.
     * @param buffers The binary buffers.
     */
    sendComm(type: string, content: any, metadata: any, ident: any, buffers: any): Promise<void>;
    /**
     * Initialization options.
     */
    protected _options: IPyodideWorkerKernel.IOptions | null;
    /**
     * A promise that resolves when all initiaization is complete.
     */
    protected _initialized: Promise<void>;
    private _initializer;
    protected _pyodide: Pyodide.PyodideInterface;
    /** TODO: real typing */
    protected _localPath: string;
    protected _driveName: string;
    protected _kernel: any;
    protected _interpreter: any;
    protected _stdout_stream: any;
    protected _stderr_stream: any;
    protected _resolveInputReply: any;
    protected _driveFS: DriveFS | null;
    protected _sendWorkerMessage: (msg: any) => void;
}
