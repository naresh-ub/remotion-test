// Copyright (c) Jupyter Development Team.
// Distributed under the terms of the Modified BSD License.
import { ServerConnection, ServiceManager } from '@jupyterlab/services';
import { Application } from '@lumino/application';
import { Signal, Stream } from '@lumino/signaling';
import { WebSocket } from 'mock-socket';
import { Router } from './router';
/**
 * A local event manager service.
 *
 * #### Notes
 * Schema IDs are not verified and all client-emitted events emit.
 */
class LocalEventManager {
    constructor(options) {
        this._isDisposed = false;
        this._serverSettings = options.serverSettings;
        this._stream = new Stream(this);
    }
    async emit({ data, schema_id }) {
        this._stream.emit({ ...data, schema_id });
    }
    dispose() {
        if (this.isDisposed) {
            return;
        }
        this._isDisposed = true;
        Signal.clearData(this);
        this._stream.stop();
    }
    get isDisposed() {
        return this._isDisposed;
    }
    get stream() {
        return this._stream;
    }
    get serverSettings() {
        return this._serverSettings;
    }
}
/**
 * Server is the main application class. It is instantiated once and shared.
 */
export class JupyterLiteServer extends Application {
    /**
     * Construct a new JupyterLite object.
     *
     * @param options The instantiation options for a JupyterLiteServer application.
     */
    constructor(options) {
        var _a;
        super(options);
        /**
         * The name of the application.
         */
        this.name = 'JupyterLite Server';
        /**
         * A namespace/prefix plugins may use to denote their provenance.
         */
        this.namespace = this.name;
        /**
         * The version of the application.
         */
        this.version = 'unknown';
        this._router = new Router();
        const serverSettings = {
            ...ServerConnection.makeSettings(),
            WebSocket,
            fetch: (_a = this.fetch.bind(this)) !== null && _a !== void 0 ? _a : undefined,
        };
        this._serviceManager = new ServiceManager({
            standby: 'never',
            serverSettings,
            events: new LocalEventManager({ serverSettings }),
        });
    }
    /**
     * Get the underlying `Router` instance.
     */
    get router() {
        return this._router;
    }
    /**
     * Get the underlying lite service manager for this app.
     */
    get serviceManager() {
        return this._serviceManager;
    }
    /**
     * Handle an incoming request from the client.
     *
     * @param req The incoming request
     * @param init The optional init request
     */
    async fetch(req, init) {
        if (!(req instanceof Request)) {
            throw Error('Request info is not a Request');
        }
        return this._router.route(req);
    }
    /**
     * Attach the application shell to the DOM.
     *
     * @param id - The id of the host node for the shell, or `''`.
     *
     * #### Notes
     * For this server application there is no shell to attach
     */
    attachShell(id) {
        // no-op
    }
    /**
     * A method invoked on a window `'resize'` event.
     *
     * #### Notes
     * For this server application there is no shell to update
     */
    evtResize(event) {
        // no-op
    }
    /**
     * Register plugins from a plugin module.
     *
     * @param mod - The plugin module to register.
     */
    registerPluginModule(mod) {
        let data = mod.default;
        // Handle commonjs exports.
        if (!Object.prototype.hasOwnProperty.call(mod, '__esModule')) {
            data = mod;
        }
        if (!Array.isArray(data)) {
            data = [data];
        }
        data.forEach((item) => {
            try {
                this.registerPlugin(item);
            }
            catch (error) {
                console.error(error);
            }
        });
    }
    /**
     * Register the plugins from multiple plugin modules.
     *
     * @param mods - The plugin modules to register.
     */
    registerPluginModules(mods) {
        mods.forEach((mod) => {
            this.registerPluginModule(mod);
        });
    }
}
//# sourceMappingURL=app.js.map