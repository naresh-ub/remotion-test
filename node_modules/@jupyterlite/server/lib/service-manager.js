import { PromiseDelegate } from '@lumino/coreutils';
import { Signal } from '@lumino/signaling';
import { PageConfig, URLExt } from '@jupyterlab/coreutils';
import { WORKER_NAME } from './tokens';
const VERSION = PageConfig.getOption('appVersion');
const SW_PING_ENDPOINT = '/api/service-worker-heartbeat';
export class ServiceWorkerManager {
    constructor(options) {
        var _a;
        this.unregisterOldServiceWorkers = async (scriptURL) => {
            const versionKey = `${scriptURL}-version`;
            // Check if we have an installed version. If we do, compare it to the current version
            // and unregister all service workers if they are different.
            const installedVersion = localStorage.getItem(versionKey);
            if ((installedVersion && installedVersion !== VERSION) || !installedVersion) {
                // eslint-disable-next-line no-console
                console.info('New version, unregistering existing service workers.');
                const registrations = await navigator.serviceWorker.getRegistrations();
                await Promise.all(registrations.map((registration) => registration.unregister()));
                // eslint-disable-next-line no-console
                console.info('All existing service workers have been unregistered.');
            }
            localStorage.setItem(versionKey, VERSION);
        };
        this._pingServiceWorker = async () => {
            const response = await fetch(SW_PING_ENDPOINT);
            const text = await response.text();
            if (text === 'ok') {
                setTimeout(this._pingServiceWorker, 20000);
            }
        };
        this._registration = null;
        this._registrationChanged = new Signal(this);
        this._ready = new PromiseDelegate();
        const workerUrl = (_a = options === null || options === void 0 ? void 0 : options.workerUrl) !== null && _a !== void 0 ? _a : URLExt.join(PageConfig.getBaseUrl(), WORKER_NAME);
        const fullWorkerUrl = new URL(workerUrl, window.location.href);
        const enableCache = PageConfig.getOption('enableServiceWorkerCache') || 'false';
        fullWorkerUrl.searchParams.set('enableCache', enableCache);
        void this.initialize(fullWorkerUrl.href).catch(console.warn);
    }
    /**
     * A signal emitted when the registration changes.
     */
    get registrationChanged() {
        return this._registrationChanged;
    }
    /**
     * Whether the ServiceWorker is enabled or not.
     */
    get enabled() {
        return this._registration !== null;
    }
    get ready() {
        return this._ready.promise;
    }
    async initialize(workerUrl) {
        const { serviceWorker } = navigator;
        let registration = null;
        if (!serviceWorker) {
            console.warn('ServiceWorkers not supported in this browser');
        }
        else if (serviceWorker.controller) {
            const scriptURL = serviceWorker.controller.scriptURL;
            await this.unregisterOldServiceWorkers(scriptURL);
            registration = (await serviceWorker.getRegistration(scriptURL)) || null;
            // eslint-disable-next-line no-console
            console.info('JupyterLite ServiceWorker was already registered');
        }
        if (!registration && serviceWorker) {
            try {
                // eslint-disable-next-line no-console
                console.info('Registering new JupyterLite ServiceWorker', workerUrl);
                registration = await serviceWorker.register(workerUrl);
                // eslint-disable-next-line no-console
                console.info('JupyterLite ServiceWorker was sucessfully registered');
            }
            catch (err) {
                console.warn(err);
                console.warn(`JupyterLite ServiceWorker registration unexpectedly failed: ${err}`);
            }
        }
        this._setRegistration(registration);
        if (!registration) {
            this._ready.reject(void 0);
        }
        else {
            this._ready.resolve(void 0);
            setTimeout(this._pingServiceWorker, 20000);
        }
    }
    _setRegistration(registration) {
        this._registration = registration;
        this._registrationChanged.emit(this._registration);
    }
}
//# sourceMappingURL=service-manager.js.map