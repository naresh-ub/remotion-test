/// <reference types="serviceworker" />
/**
 * The name of the cache
 */
declare const CACHE = "precache";
/**
 * Communication channel for drive access
 */
declare const broadcast: BroadcastChannel;
/**
 * Whether to enable the cache
 */
declare let enableCache: boolean;
/**
 * Handle installation with the cache
 */
declare function onInstall(event: ExtendableEvent): void;
/**
 * Handle activation.
 */
declare function onActivate(event: ExtendableEvent): void;
/**
 * Handle fetching a single resource.
 */
declare function onFetch(event: FetchEvent): Promise<void>;
/** Get a cached response, and update cache. */
declare function maybeFromCache(event: FetchEvent): Promise<Response>;
/**
 * Restore a response from the cache based on the request.
 */
declare function fromCache(request: Request): Promise<Response | null>;
/**
 * This is where we call the server to get the newest version of the
 * file to use the next time we show view
 */
declare function refetch(request: Request): Promise<Response>;
/**
 * Whether a given URL should be broadcast
 */
declare function shouldBroadcast(url: URL): boolean;
/**
 * Whether the fallback behavior should be used
 */
declare function shouldDrop(request: Request, url: URL): boolean;
/**
 * Forward request to main using the broadcast channel
 */
declare function broadcastOne(request: Request): Promise<Response>;
declare function openCache(): Promise<Cache>;
/**
 * Cache a request/response pair.
 */
declare function updateCache(request: Request, response: Response): Promise<void>;
/**
 * Add all to the cache
 *
 * this is where we should (try to) add all relevant files
 */
declare function cacheAll(): Promise<void>;
