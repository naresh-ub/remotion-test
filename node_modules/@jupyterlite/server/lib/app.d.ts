import { ServiceManager } from '@jupyterlab/services';
import { Application, IPlugin } from '@lumino/application';
import { Router } from './router';
export type JupyterLiteServerPlugin<T> = IPlugin<JupyterLiteServer, T>;
/**
 * Server is the main application class. It is instantiated once and shared.
 */
export declare class JupyterLiteServer extends Application<never> {
    /**
     * Construct a new JupyterLite object.
     *
     * @param options The instantiation options for a JupyterLiteServer application.
     */
    constructor(options: Application.IOptions<never>);
    /**
     * The name of the application.
     */
    readonly name = "JupyterLite Server";
    /**
     * A namespace/prefix plugins may use to denote their provenance.
     */
    readonly namespace = "JupyterLite Server";
    /**
     * The version of the application.
     */
    readonly version = "unknown";
    /**
     * Get the underlying `Router` instance.
     */
    get router(): Router;
    /**
     * Get the underlying lite service manager for this app.
     */
    get serviceManager(): ServiceManager;
    /**
     * Handle an incoming request from the client.
     *
     * @param req The incoming request
     * @param init The optional init request
     */
    fetch(req: RequestInfo, init?: RequestInit | null | undefined): Promise<Response>;
    /**
     * Attach the application shell to the DOM.
     *
     * @param id - The id of the host node for the shell, or `''`.
     *
     * #### Notes
     * For this server application there is no shell to attach
     */
    protected attachShell(id: string): void;
    /**
     * A method invoked on a window `'resize'` event.
     *
     * #### Notes
     * For this server application there is no shell to update
     */
    protected evtResize(event: Event): void;
    /**
     * Register plugins from a plugin module.
     *
     * @param mod - The plugin module to register.
     */
    registerPluginModule(mod: JupyterLiteServer.IPluginModule): void;
    /**
     * Register the plugins from multiple plugin modules.
     *
     * @param mods - The plugin modules to register.
     */
    registerPluginModules(mods: JupyterLiteServer.IPluginModule[]): void;
    private _router;
    private _serviceManager;
}
/**
 * A namespace for Server statics.
 */
export declare namespace JupyterLiteServer {
    /**
     * The interface for a module that exports a plugin or plugins as
     * the default value.
     */
    interface IPluginModule {
        /**
         * The default export.
         */
        default: IPlugin<JupyterLiteServer, any> | IPlugin<JupyterLiteServer, any>[];
    }
}
