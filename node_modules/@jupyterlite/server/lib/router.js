/**
 * A simple router.
 */
export class Router {
    constructor() {
        this._routes = [];
    }
    /**
     * Add a new GET route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    get(pattern, callback) {
        this._add('GET', pattern, callback);
    }
    /**
     * Add a new PUT route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    put(pattern, callback) {
        this._add('PUT', pattern, callback);
    }
    /**
     * Add a new POST route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    post(pattern, callback) {
        this._add('POST', pattern, callback);
    }
    /**
     * Add a new PATCH route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    patch(pattern, callback) {
        this._add('PATCH', pattern, callback);
    }
    /**
     * Add a new DELETE route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    delete(pattern, callback) {
        this._add('DELETE', pattern, callback);
    }
    /**
     * Route a request.
     *
     * @param req The request to route.
     */
    async route(req) {
        const url = new URL(req.url);
        const { method } = req;
        const { pathname } = url;
        for (const r of this._routes) {
            if (r.method !== method) {
                continue;
            }
            const match = pathname.match(r.pattern);
            if (!match) {
                continue;
            }
            const matches = match.slice(1);
            let body;
            if (r.method === 'PATCH' || r.method === 'PUT' || r.method === 'POST') {
                try {
                    body = JSON.parse(await req.text());
                }
                catch {
                    body = undefined;
                }
            }
            return r.callback.call(null, {
                pathname,
                body,
                query: Object.fromEntries(url.searchParams),
            }, ...matches);
        }
        throw new Error('Cannot route ' + req.method + ' ' + req.url);
    }
    /**
     * Add a new route.
     *
     * @param method The method
     * @param pattern The pattern
     * @param callback The callback
     */
    _add(method, pattern, callback) {
        if (typeof pattern === 'string') {
            pattern = new RegExp(pattern);
        }
        this._routes.push({
            method,
            pattern,
            callback,
        });
    }
}
//# sourceMappingURL=router.js.map