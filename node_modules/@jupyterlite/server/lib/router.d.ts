import { ReadonlyJSONObject } from '@lumino/coreutils';
/**
 * A simple router.
 */
export declare class Router {
    /**
     * Add a new GET route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    get(pattern: string | RegExp, callback: Router.Callback): void;
    /**
     * Add a new PUT route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    put(pattern: string | RegExp, callback: Router.Callback): void;
    /**
     * Add a new POST route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    post(pattern: string | RegExp, callback: Router.Callback): void;
    /**
     * Add a new PATCH route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    patch(pattern: string | RegExp, callback: Router.Callback): void;
    /**
     * Add a new DELETE route
     *
     * @param pattern The pattern to match
     * @param callback The function to call on pattern match
     *
     */
    delete(pattern: string | RegExp, callback: Router.Callback): void;
    /**
     * Route a request.
     *
     * @param req The request to route.
     */
    route(req: Request): Promise<Response>;
    /**
     * Add a new route.
     *
     * @param method The method
     * @param pattern The pattern
     * @param callback The callback
     */
    private _add;
    private _routes;
}
/**
 * A namespace for Router statics.
 */
export declare namespace Router {
    /**
     * The Callback type.
     */
    type Callback = (req: IRequest, ...args: string[]) => Promise<Response>;
    /**
     * The Method type.
     */
    type Method = 'GET' | 'PUT' | 'POST' | 'PATCH' | 'DELETE';
    /**
     * The interface for a parsed request
     */
    interface IRequest {
        /**
         * The path for the url.
         */
        pathname: string;
        /**
         * The optional query parameters.
         */
        query?: ReadonlyJSONObject;
        /**
         * The optional body parameters.
         */
        body?: ReadonlyJSONObject;
    }
    /**
     * An interface for a route.
     */
    interface IRoute {
        method: Method;
        pattern: string | RegExp;
        callback: Callback;
    }
}
