import { Session } from '@jupyterlab/services';
import { IKernels } from '@jupyterlite/kernel';
import { ISessions } from './tokens';
/**
 * A class to handle requests to /api/sessions
 */
export declare class Sessions implements ISessions {
    /**
     * Construct a new Sessions.
     *
     * @param options The instantiation options for a Sessions.
     */
    constructor(options: Sessions.IOptions);
    /**
     * Get a session by id.
     *
     * @param id The id of the session.
     */
    get(id: string): Promise<Session.IModel>;
    /**
     * List the running sessions
     */
    list(): Promise<Session.IModel[]>;
    /**
     * Path an existing session.
     * This can be used to rename a session.
     *
     * - path updates session to track renamed paths
     * - kernel.name starts a new kernel with a given kernelspec
     *
     * @param options The options to patch the session.
     */
    patch(options: Session.IModel): Promise<Session.IModel>;
    /**
     * Start a new session
     * TODO: read path and name
     *
     * @param options The options to start a new session.
     */
    startNew(options: Session.IModel): Promise<Session.IModel>;
    /**
     * Shut down a session.
     *
     * @param id The id of the session to shut down.
     */
    shutdown(id: string): Promise<void>;
    /**
     * Handle kernel shutdown
     */
    private _handleKernelShutdown;
    private _kernels;
    private _sessions;
}
/**
 * A namespace for sessions statics.
 */
export declare namespace Sessions {
    /**
     * The instantiation options for the sessions.
     */
    interface IOptions {
        /**
         * A reference to the kernels service.
         */
        kernels: IKernels;
    }
}
