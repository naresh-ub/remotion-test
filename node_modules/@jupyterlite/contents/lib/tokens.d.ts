import { IDisposable } from '@lumino/disposable';
import { Contents as ServerContents } from '@jupyterlab/services';
import { Token } from '@lumino/coreutils';
/**
 * The token for the settings service.
 */
export declare const IContents: Token<IContents>;
/**
 * The interface for the contents service.
 */
export interface IContents {
    /**
     * A promise that resolves after the contents have been full initialized.
     */
    ready: Promise<void>;
    /**
     * Create a new untitled file or directory in the specified directory path.
     *
     * @param options: The options used to create the file.
     *
     * @returns A promise which resolves with the created file content when the file is created.
     */
    newUntitled(options?: ServerContents.ICreateOptions): Promise<ServerContents.IModel | null>;
    /**
     * Copy a file into a given directory.
     *
     * @param path - The original file path.
     * @param toDir - The destination directory path.
     *
     * @returns A promise which resolves with the new contents model when the
     *  file is copied.
     *
     * #### Notes
     * The server will select the name of the copied file.
     */
    copy(path: string, toDir: string): Promise<ServerContents.IModel>;
    /**
     * Get a file or directory.
     *
     * @param path: The path to the file.
     * @param options: The options used to fetch the file.
     *
     * @returns A promise which resolves with the file content.
     */
    get(path: string, options?: ServerContents.IFetchOptions): Promise<ServerContents.IModel | null>;
    /**
     * Rename a file or directory.
     *
     * @param oldLocalPath - The original file path.
     * @param newLocalPath - The new file path.
     *
     * @returns A promise which resolves with the new file content model when the file is renamed.
     */
    rename(oldLocalPath: string, newLocalPath: string): Promise<ServerContents.IModel>;
    /**
     * Save a file.
     *
     * @param path - The desired file path.
     * @param options - Optional overrides to the model.
     *
     * @returns A promise which resolves with the file content model when the file is saved.
     */
    save(path: string, options?: Partial<ServerContents.IModel>): Promise<ServerContents.IModel | null>;
    /**
     * Delete a file.
     *
     * @param path - The path to the file.
     */
    delete(path: string): Promise<void>;
    /**
     * Create a checkpoint for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with the new checkpoint model when the
     *   checkpoint is created.
     */
    createCheckpoint(path: string): Promise<ServerContents.ICheckpointModel>;
    /**
     * List available checkpoints for a file.
     *
     * @param path - The path of the file.
     *
     * @returns A promise which resolves with a list of checkpoint models for
     *    the file.
     */
    listCheckpoints(path: string): Promise<ServerContents.ICheckpointModel[]>;
    /**
     * Restore a file to a known checkpoint state.
     *
     * @param path - The path of the file.
     * @param checkpointID - The id of the checkpoint to restore.
     *
     * @returns A promise which resolves when the checkpoint is restored.
     */
    restoreCheckpoint(path: string, checkpointID: string): Promise<void>;
    /**
     * Delete a checkpoint for a file.
     *
     * @param path - The path of the file.
     * @param checkpointID - The id of the checkpoint to delete.
     *
     * @returns A promise which resolves when the checkpoint is deleted.
     */
    deleteCheckpoint(path: string, checkpointID: string): Promise<void>;
}
/**
 * Commonly-used mimetypes
 */
export declare namespace MIME {
    const JSON = "application/json";
    const PLAIN_TEXT = "text/plain";
    const OCTET_STREAM = "octet/stream";
}
/**
 * A namespace for file constructs.
 */
export declare namespace FILE {
    /**
     * Get a mimetype (or fallback).
     */
    function getType(ext: string, defaultType?: string | null): string;
    /**
     * Determine whether the given extension matches a given fileFormat.
     */
    function hasFormat(ext: string, fileFormat: 'base64' | 'text' | 'json'): boolean;
}
/**
 * The token for the BroadcastChannel broadcaster.
 */
export declare const IBroadcastChannelWrapper: Token<IBroadcastChannelWrapper>;
export interface IBroadcastChannelWrapper extends IDisposable {
    enable(): void;
    disable(): void;
    enabled: boolean;
}
