import { Contents as ServerContents } from '@jupyterlab/services';
import { TDriveRequest, TDriveMethod } from './drivefs';
import { IBroadcastChannelWrapper } from './tokens';
import { IDriveContentsProcessor } from './drivecontents';
/** A broadcaster for the ServiceWorker */
export declare class BroadcastChannelWrapper implements IBroadcastChannelWrapper {
    isDisposed: boolean;
    constructor(options: BroadcastChannelWrapper.IOptions);
    get enabled(): boolean;
    enable(): void;
    disable(): void;
    /** Clean up the broadcaster. */
    dispose(): void;
    /** Handle a message received on the BroadcastChannel */
    protected _onMessage: <T extends TDriveMethod>(event: MessageEvent<TDriveRequest<T>>) => Promise<void>;
    protected _channel: BroadcastChannel | null;
    protected _contents: ServerContents.IManager;
    protected _driveContentsProcessor: IDriveContentsProcessor;
    protected _enabled: boolean;
}
/** A namespace for  */
export declare namespace BroadcastChannelWrapper {
    interface IOptions {
        contents: ServerContents.IManager;
    }
    type TBroadcastResponse = any;
}
