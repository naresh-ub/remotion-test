import { Contents } from '@jupyterlab/services';
import { TDriveMethod, TDriveRequest, TDriveResponse } from './drivefs';
export interface IDriveContentsProcessor {
    /**
     * Process a content request
     *
     * @param request the request
     */
    processDriveRequest<T extends TDriveMethod>(request: TDriveRequest<T>): Promise<TDriveResponse<T>>;
    /**
     * Process the request to read a directory content
     *
     * @param request the request
     */
    readdir(request: TDriveRequest<'readdir'>): Promise<TDriveResponse<'readdir'>>;
    /**
     * Process the request to remove a directory
     *
     * @param request the request
     */
    rmdir(request: TDriveRequest<'rmdir'>): Promise<TDriveResponse<'rmdir'>>;
    /**
     * Process the request to rename a file or directory
     *
     * @param request the request
     */
    rename(request: TDriveRequest<'rename'>): Promise<TDriveResponse<'rename'>>;
    /**
     * Process the request to get the node mode (file or directory)
     *
     * @param request the request
     */
    getmode(request: TDriveRequest<'getmode'>): Promise<TDriveResponse<'getmode'>>;
    /**
     * Process the request to check if a node exist
     *
     * @param request the request
     */
    lookup(request: TDriveRequest<'lookup'>): Promise<TDriveResponse<'lookup'>>;
    /**
     * Process the request to create a directory/file
     *
     * @param request the request
     */
    mknod(request: TDriveRequest<'mknod'>): Promise<TDriveResponse<'mknod'>>;
    /**
     * Process the request to get a node stats
     *
     * @param request the request
     */
    getattr(request: TDriveRequest<'getattr'>): Promise<TDriveResponse<'getattr'>>;
    /**
     * Process the request to get the content of a file
     *
     * @param request the request
     */
    get(request: TDriveRequest<'get'>): Promise<TDriveResponse<'get'>>;
    /**
     * Process the request to write the content of a file
     *
     * @param request the request
     */
    put(request: TDriveRequest<'put'>): Promise<TDriveResponse<'put'>>;
}
/**
 * Class for processing a drive request from the DriveFS.
 */
export declare class DriveContentsProcessor implements IDriveContentsProcessor {
    private contentsManager;
    constructor(options: DriveContentsProcessor.IOptions);
    processDriveRequest<T extends TDriveMethod>(request: TDriveRequest<T>): Promise<TDriveResponse<T>>;
    readdir(request: TDriveRequest<'readdir'>): Promise<TDriveResponse<'readdir'>>;
    rmdir(request: TDriveRequest<'rmdir'>): Promise<TDriveResponse<'rmdir'>>;
    rename(request: TDriveRequest<'rename'>): Promise<TDriveResponse<'rename'>>;
    getmode(request: TDriveRequest<'getmode'>): Promise<TDriveResponse<'getmode'>>;
    lookup(request: TDriveRequest<'lookup'>): Promise<TDriveResponse<'lookup'>>;
    mknod(request: TDriveRequest<'mknod'>): Promise<TDriveResponse<'mknod'>>;
    getattr(request: TDriveRequest<'getattr'>): Promise<TDriveResponse<'getattr'>>;
    get(request: TDriveRequest<'get'>): Promise<TDriveResponse<'get'>>;
    put(request: TDriveRequest<'put'>): Promise<TDriveResponse<'put'>>;
}
/**
 * A namespace for DriveContentsProcessor configurations, etc.
 */
export declare namespace DriveContentsProcessor {
    /**
     * Initialization options for a drive;
     */
    interface IOptions {
        contentsManager: Contents.IManager;
    }
}
