import type { IRenderMimeRegistry } from '@jupyterlab/rendermime';
import type { Widget } from '@lumino/widgets';
import { KernelWidgetManager } from '@jupyter-widgets/jupyterlab-manager';
export declare const WIDGET_MIMETYPE = "application/vnd.jupyter.widget-view+json";
import * as base from '@jupyter-widgets/base';
import { RequireJsLoader } from './requireJsLoader';
import type { Kernel } from '@jupyterlab/services';
/**
 * A Widget Manager class for Thebe using the context-free KernelWidgetManager from
 * the JupyterLab  Manager and inspierd by the implementation in Voila here:
 * https://github.dev/voila-dashboards/voila/blob/main/packages/voila/src/manager.ts
 *
 */
export declare class ThebeManager extends KernelWidgetManager {
    id: string;
    _loader: RequireJsLoader;
    constructor(kernel: Kernel.IKernelConnection, rendermime: IRenderMimeRegistry);
    addWidgetFactories(): void;
    removeWidgetFactories(): void;
    /**
     * TODO implement a reasonable method for thebe-core that can load serialized widget state
     * see: https://github.dev/voila-dashboards/voila/blob/7090eb3e30c0c4aa25c2b7d5d2d45e8de1333b3b/packages/voila/src/manager.ts#L52
     *
     */
    build_widgets(): Promise<void>;
    display_view(msg: any, view: any, options: any): Promise<Widget>;
    loadClass(className: string, moduleName: string, moduleVersion: string): Promise<typeof base.WidgetModel | typeof base.WidgetView>;
    private _registerWidgets;
}
