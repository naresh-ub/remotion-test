import { makeRenderMimeRegistry } from './rendermime';
import { OutputArea, OutputAreaModel } from '@jupyterlab/outputarea';
import { makeMathjaxOptions } from './options';
import { Widget } from '@lumino/widgets';
import { MessageLoop } from '@lumino/messaging';
class PassiveCellRenderer {
    constructor(id, rendermime, mathjax) {
        this.id = id;
        this.rendermime = rendermime !== null && rendermime !== void 0 ? rendermime : makeRenderMimeRegistry(mathjax !== null && mathjax !== void 0 ? mathjax : makeMathjaxOptions());
        this.model = new OutputAreaModel({ trusted: true });
        this.area = new OutputArea({
            model: this.model,
            rendermime: this.rendermime,
        });
    }
    /**
     * Serialize the model state to JSON
     */
    get outputs() {
        return this.model.toJSON();
    }
    get isAttachedToDOM() {
        return this.area.isAttached;
    }
    attachToDOM(el, strict = false) {
        if (!this.area || !el) {
            console.error(`thebe:renderer:attachToDOM - could not attach to DOM - area: ${this.area}, el: ${el}`);
            return;
        }
        if (this.area.isAttached) {
            // TODO should we detach and reattach?
            console.debug(`thebe:renderer:attachToDOM - already attached`);
            if (strict)
                return;
        }
        else {
            // if the target element has contents, preserve it but wrap it in our output area
            console.debug(`thebe:renderer:attachToDOM ${this.id} - appending existing contents`);
            if (el.innerHTML) {
                this.area.model.add({
                    output_type: 'display_data',
                    data: {
                        'text/html': el.innerHTML,
                    },
                });
            }
        }
        el.textContent = '';
        const div = document.createElement('div');
        div.style.position = 'relative';
        div.className = 'thebe-output';
        el.append(div);
        MessageLoop.sendMessage(this.area, Widget.Msg.BeforeAttach);
        div.appendChild(this.area.node);
        MessageLoop.sendMessage(this.area, Widget.Msg.AfterAttach);
    }
    setOutputText(text) {
        if (!this.area)
            return;
        this.area.model.clear(true);
        this.area.model.add({
            output_type: 'stream',
            name: 'stdout',
            text,
        });
    }
    /**
     * Clears the output area model
     *
     * @returns
     */
    clear() {
        if (!this.area)
            return;
        this.area.model.clear();
    }
    /**
     * Will trigger the output to render an error with text taken from the optional argument
     *
     * @param error
     * @returns
     */
    clearOnError(error) {
        if (!this.area)
            return;
        this.area.model.clear();
        this.area.model.add({
            output_type: 'stream',
            name: 'stderr',
            text: `Failed to execute. ${error !== null && error !== void 0 ? error : ''} Please refresh the page.`,
        });
    }
    /**
     * Render output data directly from json
     *
     * @param outputs - serialised jupyter outputs
     * @returns
     */
    render(outputs) {
        this.model.fromJSON(outputs);
    }
}
export default PassiveCellRenderer;
//# sourceMappingURL=passive.js.map